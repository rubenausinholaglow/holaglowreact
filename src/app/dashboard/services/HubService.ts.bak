<<<<<<< HEAD
import {
  HttpTransportType,
  HubConnection,
  HubConnectionBuilder,
  HubConnectionState,
} from '@microsoft/signalr';

class HubService {
  private readonly connection: HubConnection;

  constructor(socketUrl: string) {
    this.connection = new HubConnectionBuilder()
      .withUrl(socketUrl, {
        skipNegotiation: true,
        transport: HttpTransportType.WebSockets,
      })
      .withAutomaticReconnect()
      .build();

    this.startConnection();
  }

  private async startConnection() {
    try {
      await this.connection.start();
    } catch (error) {
      console.log('Connection failed: ', error);
    }
  }

  public isConnected(): boolean {
    return this.connection.state === HubConnectionState.Connected;
  }

  public getConnection(): HubConnection {
    return this.connection;
  }
}

export default HubService;
=======
import { HubConnection, HubConnectionBuilder } from '@microsoft/signalr';

export function setupSocketConnection(): HubConnection {
  const SOCKET_URL = process.env.NEXT_PUBLIC_CLINICS_API + '/Slack/Response';
  const connection = new HubConnectionBuilder()
    .withUrl(SOCKET_URL)
    .withAutomaticReconnect()
    .build();

  connection
    .start()
    .then(() => {
      connection.on('ReceiveMessage', Recivemessage => {
        connection.stop().then(() => {
          return null;
        });
      });
    })
    .catch(e => console.log('Connection failed: ', e));
  return connection;
}

export function closeSocketConnection(connection: HubConnection) {
  if (connection && connection.state === 'Connected') {
    connection.stop().then(() => {
      return null;
    });
  }
}
>>>>>>> FixesDev
